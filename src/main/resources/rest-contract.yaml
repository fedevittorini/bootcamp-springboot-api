openapi: 3.0.3
info:
  title: Eduit REST shopping cart API - OpenAPI 3.0
  description: |-
    Aplicacion Carrito de compras Bootcamp EducacionIt.
  termsOfService: https://www.educacionit.com/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
externalDocs:
  description: Find out more about Educacion IT
  url: https://www.educacionit.com/
servers:
  - url: https://localhost:8080/api/v1
tags:
  - name: backoffice
    description: Everything about backoffice endpoints
  - name: store
    description: Access to the store
  - name: user
    description: Operations about user
paths:
  /users/user:
    post:
      tags:
        - user
      security:
        - bearerAuth: []
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDTO'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseContainerUserResponseDTO'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    get:
      tags:
        - user
      security:
        - bearerAuth: []
      summary: Retrieve a list of users
      description: This can only be done by the logged in user.
      operationId: retrieveAllUsers
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserListDTO'
  /users/login:
    get:
      tags:
        - user
      summary: Retrieve a list of users
      description: This can only be done by the logged in user.
      operationId: login
      parameters: 
        - name: username
          in: query
          description: authentication token
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: authentication token
          required: true
          schema:
            type: string
      responses:
        default:
          description: successful operation
          headers: 
            Authorization:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseContainerUserResponseDTO'
  /users/logout:
    get:
      tags:
        - user
      security:
        - bearerAuth: []
      summary: Retrieve a list of users
      description: This can only be done by the logged in user.
      operationId: logout
      parameters: 
        - name: token
          in: query
          description: authentication token
          required: true
          schema:
            type: string
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseContainerUserResponseDTO'
  /products/product:
    post:
      tags:
        - store
      security:
        - bearerAuth: []
      summary: Create product
      description: This can only be done by the logged in user.
      operationId: createProduct
      requestBody:
        description: Created product object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductDTO'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseContainerProductResponseDTO'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    get:
      tags:
        - store
      security:
        - bearerAuth: []
      summary: Retrieve a list of users
      description: This can only be done by the logged in user.
      operationId: retrieveAllProducts
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductListDTO'

components:
  schemas:
    UserDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          format: email
          example: john@email.com
          description: this field represent the user email
        password:
          type: string
          maxLength: 16
          minLength: 6
          example: 'p4$sW0rD!'
        dateCreated:
          type: string
          format: date
          example: '2023-02-01'
        dateDeleted:
          type: string
          format: date
          example: '2023-02-01'
      required: 
        - username
        - firstName
        - lastName
        - email
        - password
        - dateCreated
    UserListDTO:
      type: array
      items: 
        $ref: '#/components/schemas/UserDTO'
    CategoryDTO:
      type: object
      properties: 
        id:
          type: integer
          format: int64
          example: 8
        name:
          type: string
          example: James
        parentCategoryId:
          type: integer
          format: int64
          example: 1
        dateCreated:
          type: string
          format: date
          example: '2023-02-01'
        dateDeleted:
          type: string
          format: date
          example: '2023-02-01'
      required: 
        - name
        - dateCreated
    ProductDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 37
        name:
          type: string
          example: Reloj Smart Samsung
        description:
          type: string
          example: Reloj Smartwatch samsung Galaxy watch 4 
        price:
          type: number
          format: double
          example: 7000
        qty:
          type: number
          example: 2
          description: the stock quantity.
        category:
          $ref: '#/components/schemas/CategoryDTO'
        dateCreated:
          type: string
          format: date
          example: '2023-02-01'
        dateDeleted:
          type: string
          format: date
          example: '2023-02-01'
      required: 
        - name
        - price
        - qty
        - category
        - dateCreated
    ProductListDTO:
      type: array
      items: 
        $ref: '#/components/schemas/ProductDTO'
    CartDTO:
      type: object
      properties: 
        id:
          type: integer
          format: int64
          example: 10
        user:
          $ref: '#/components/schemas/UserDTO'
        product_list:
          type: array
          items: 
            $ref: '#/components/schemas/ProductDTO'
        dateCreated:
          type: string
          format: date
          example: '2023-02-01'
        dateDeleted:
          type: string
          format: date
          example: '2023-02-01'
      required: 
        - user
        - dateCreated
    ErrorResponseDTO:
      type: array
      items:
        $ref: '#/components/schemas/ErrorItemDTO'
    ErrorItemDTO:
      type: object
      properties:
        code:
          type: string
        link:
          type: string
        detail:
          type: string
    MetaInformationResponseDTO:
      required:
      - time
      type: object
      properties:
        time:
          type: integer
          format: int64
        refNumber:
          type: string
    ResponseContainerUserResponseDTO:
      required:
      - meta
      type: object
      properties:
        errors:
          $ref: '#/components/schemas/ErrorResponseDTO'
        data:
          $ref: '#/components/schemas/UserDTO'
        meta:
          $ref: '#/components/schemas/MetaInformationResponseDTO'
    ResponseContainerProductResponseDTO:
      required:
      - meta
      type: object
      properties:
        errors:
          $ref: '#/components/schemas/ErrorResponseDTO'
        data:
          $ref: '#/components/schemas/ProductDTO'
        meta:
          $ref: '#/components/schemas/MetaInformationResponseDTO'
          
  responses:
    UnauthorizedError:
      description: Access token is missing or invalid
      
  securitySchemes:
    bearerAuth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT 
      
security:
  - bearerAuth: []  

